type: edu
files:
  - name: creditcalc/loan_calculator.py
    visible: true
    text: |
      import argparse
      import math
      
      
      class LoanCalculator:
          args = None
      
          def __init__(self):
              parser = argparse.ArgumentParser()
              parser.add_argument('--payment', type=float)
              parser.add_argument('--principal', type=int)
              parser.add_argument('--periods', type=int)
              parser.add_argument('--interest', type=float)
              self.args = parser.parse_args()
              self.calculate_user_input()
      
          def calculate_user_input(self):
              try:
                  if self.args.payment is None:
                      self.calculate_monthly_payment()
                  elif self.args.principal is None:
                      self.calculate_loan_principal()
                  elif self.args.periods is None:
                      self.calculate_months_to_pay()
              except Exception:
                  print("Some necessary arguments are missed!")
      
          def calculate_months_to_pay(self):
              payment = self.args.payment
              principal = self.args.principal
              interest_rate = self.interest_rate()
      
              months_amount = math.ceil(math.log(payment / (payment - interest_rate * principal), 1 + interest_rate))
      
              years, months = divmod(months_amount, 12)
      
              if months > 0:
                  years += months // 12
                  months %= 12
      
              print(self.print_months_to_pay(years, months))
      
          def calculate_monthly_payment(self):
              principal = self.args.principal
              periods = self.args.periods
              interest_rate = self.interest_rate()
              result = math.ceil(principal * (interest_rate * pow(1 + interest_rate, periods)) / (
                      pow(1 + interest_rate, periods) - 1))
              print(f'Your monthly payment = {result}!')
      
          def calculate_loan_principal(self):
              payments = self.args.payment
              periods = self.args.periods
              interest_rate = self.interest_rate()
              result = math.floor(payments / (interest_rate * pow(1 + interest_rate, periods) / (
                      pow(1 + interest_rate, periods) - 1)))
              print(f'Your loan principal = {result}!')
      
          def interest_rate(self):
              interest = self.args.interest
              return interest / (12 * 100)
      
          @staticmethod
          def print_months_to_pay(years, months):
              years_str = f'{years} {"years" if years != 1 else "year"} ' if years != 0 else ''
              months_str = f'{months} {"months" if months != 1 else "month"}' if months != 0 else ''
      
              if years_str and months_str:
                  middle_str = 'and '
              else:
                  middle_str = ''
      
              return f'It will take {years_str}{middle_str}{months_str} to repay this loan!'
      
      
      def main():
          LoanCalculator()
      
      
      if __name__ == '__main__':
          main()
    learner_created: false
  - name: test/__init__.py
    visible: false
    learner_created: false
  - name: test/tests.py
    visible: false
    text: |
      from hstest.stage_test import StageTest
      from hstest.test_case import TestCase
      from hstest.check_result import CheckResult
      import re
      
      CheckResult.correct = lambda: CheckResult(True, '')
      CheckResult.wrong = lambda feedback: CheckResult(False, feedback)
      
      
      class LoanCalcTest(StageTest):
          def generate(self):
              return [
                  TestCase(
                      args=[
                          '--type=annuity',
                          '--payment=8722',
                          '--periods=120',
                          '--interest=5.6',
                      ],
                      attach=('principal', 800018, 246622),
                  ),
                  TestCase(
                      args=[
                          '--type=annuity',
                          '--payment=6898',
                          '--periods=240',
                          '--interest=3.4',
                      ],
                      attach=('principal', 1199997, 455523),
                  ),
      
                  TestCase(
                      args=[
                          '--type=annuity',
                          '--principal=1000000',
                          '--periods=8',
                          '--interest=9.8',
                      ],
                      attach=('payment', 129638, 37104),
                  ),
      
                  TestCase(
                      args=[
                          '--type=annuity',
                          '--principal=1000000',
                          '--periods=60',
                          '--interest=10',
                      ],
                      attach=('payment', 274880, 21248),
                  ),
      
                  TestCase(
                      args=[
                          '--type=annuity',
                          '--principal=500000',
                          '--payment=23000',
                          '--interest=7.8',
                      ],
                      attach=('periods', 52000, 24),
                  ),
      
                  TestCase(
                      args=[
                          '--type=diff',
                          '--principal=1000000',
                          '--periods=10',
                          '--interest=10',
                      ],
                      attach=[
                          108334,
                          107500,
                          106667,
                          105834,
                          105000,
                          104167,
                          103334,
                          102500,
                          101667,
                          100834,
                          45837,
                      ],
                  ),
      
                  TestCase(
                      args=[
                          '--type=diff',
                          '--principal=500000',
                          '--periods=8',
                          '--interest=7.8',
                      ],
                      attach=[
                          65750,
                          65344,
                          64938,
                          64532,
                          64125,
                          63719,
                          63313,
                          62907,
                          14628,
                      ],
                  ),
                  # Type is not diff nor annuity
                  TestCase(
                      args=['--type=notdiff', '--principal=1000000', '--payment=104000', '--periods=8', ],
                      attach='Incorrect',
                  ),
                  # Type is not specified
                  TestCase(
                      args=['--principal=1000000', '--payment=104000', '--periods=8', '--interest=10'],
                      attach='Incorrect',
                  ),
                  # Payment provided while type is diff
                  TestCase(
                      args=['--type=diff', '--principal=-1000000', '--payment=104000', '--periods=8', ],
                      attach='Incorrect',
                  ),
                  # Interest is not specified
                  TestCase(
                      args=['--type=annuity', '--principal=1000000', '--payment=104000', '--periods=8', ],
                      attach='Incorrect',
                  ),
                  # Less than 4 arguments
                  TestCase(
                      args=['--type=annuity', '--principal=1000000', '--payment=104000', ],
                      attach='Incorrect',
                  ),
                  # Values are negative
                  TestCase(
                      args=['--type=diff', '--principal=-1000000', '--periods=10', '--interest=10', ],
                      attach='Incorrect',
                  ),
                  TestCase(
                      args=['--type=diff', '--principal=1000000', '--periods=-10', '--interest=10', ],
                      attach='Incorrect',
                  ),
                  TestCase(
                      args=['--type=diff', '--principal=1000000', '--periods=10', '--interest=-10', ],
                      attach='Incorrect',
                  ),
                  TestCase(
                      args=['--type=annuity', '--principal=1000000', '--payment=-104000', '--interest=10', ],
                      attach='Incorrect',
                  ),
              ]
      
          def check(self, reply, attach):
              if attach == 'Incorrect':
                  if attach.lower() in reply.lower():
                      return CheckResult.correct()
      
                  return CheckResult.wrong(
                      'Parameters are incorrect. '
                      'Just output "Incorrect parameters"'
                  )
      
              numbers = re.findall(r'[-+]?(\d*\.\d+|\d+)', reply)
              if len(numbers) == 0:
                  return CheckResult.wrong(
                      'No numbers in the answer',
                  )
      
              if isinstance(attach, tuple):
                  if attach[0] == 'periods':
                      years = int(attach[2] / 12)
                      months = str(int(attach[2] % 12))
                      for i in numbers:
                          if abs(attach[1] - float(i)) < 2:
                              if str(months) in numbers or str(years) in numbers:
                                  return CheckResult.correct()
      
                      if years == 0:
                          output = (
                              'Looks like your periods '
                              'calculations aren\'t working properly. '
                              'Correct months and overpayment are '
                              '[ {0}, {1} ]'
                              ', but you output: {2}'
                          )
                          return CheckResult.wrong(
                              output.format(attach[2], attach[1], numbers),
                          )
                      else:
                          if months != '0':
                              output = (
                                  'Looks like your periods '
                                  'calculations aren\'t working properly. '
                                  'Correct years, months and overpayment are '
                                  '[ {0}, {1}, {2} ]'
                                  ', but you output: {3}'
                              )
                              return CheckResult.wrong(
                                  output.format(years, months, attach[1], numbers),
                              )
                          else:
                              output = (
                                  'Looks like your periods '
                                  'calculations aren\'t working properly. '
                                  'Correct years and overpayment are '
                                  '[ {0}, {1} ]'
                                  ', but you output: {2}'
                              )
                              return CheckResult.wrong(
                                  output.format(years, attach[1], numbers),
                              )
                  for i in numbers:
                      if not abs(attach[1] - float(i)) < 2:
                          if not abs(attach[2] - float(i)) < 2:
                              if attach[0] == 'payment':
                                  output = (
                                      'Looks like your annuity payments '
                                      'calculations aren\'t working properly. '
                                      'Correct annuity payment and overpayment are '
                                      '[ {0}, {1} ]'
                                      ', but you output: {2}'
                                  )
                              else:
                                  output = (
                                      'Looks like your loan principal '
                                      'calculations aren\'t working properly. '
                                      'Correct loan principal and overpayment are '
                                      '[ {0}, {1} ]'
                                      ', but you output: {2}'
                                  )
                              return CheckResult.wrong(
                                  output.format(attach[2], attach[1], numbers),
                              )
      
                  return CheckResult.correct()
      
              if isinstance(attach, list):
                  if (len(numbers) + 1) / 2 < len(attach):
                      user_numbers = numbers[1::2]
                      if numbers[-1] not in user_numbers:
                          user_numbers.append(numbers[-1])
                      return CheckResult.wrong(
                          'Not enough values for diff payment in the answer '
                          'must be {0} with overpayment {1}, but you output: {2}'
                          .format(attach[:-1], attach[-1], user_numbers)
                      )
      
                  for figure in attach:
                      flag = False
                      for number in numbers:
                          if abs(float(number) - figure) < 2:
                              flag = True
                              break
                      if flag is False:
                          user_numbers = numbers[1::2]
                          if numbers[-1] not in user_numbers:
                              user_numbers.append(numbers[-1])
                          return CheckResult.wrong(
                              'Incorrect result '
                              'must be {0} with overpayment {1}, but you output: {2}'
                              .format(attach[:-1], attach[-1], user_numbers)
                          )
      
              return CheckResult.correct()
      
      
      if __name__ == '__main__':
          LoanCalcTest('creditcalc.creditcalc').run_tests()
    learner_created: false
  - name: tests.py
    visible: false
    text: |-
      from test.tests import LoanCalcTest
      
      if __name__ == '__main__':    LoanCalcTest('creditcalc.creditcalc').run_tests()
    learner_created: false
feedback_link: https://hyperskill.org/learn/step/8005#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Mon, 08 Apr 2024 07:28:14 UTC"
record: -1
